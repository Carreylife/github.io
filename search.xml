<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JavaScript 语句后应该加分号么？]]></title>
    <url>%2Fblog%2Fjavascript%2F2019-08-23%2F</url>
    <content type="text"><![CDATA[Q: JavaScript 语句后应该加分号么？ A: emmm~,入乡随俗也是一种规则。 借用Evan You的回答&emsp;没有应该不应该，只有你自己喜欢不喜欢。JavaScript 语法长得 C-like 不代表它本质上和 C 是一类语言，所有直觉性的 “当然应该加分号” 都是保守的、未经深入思考的草率结论。后来新设计的语言里可选分号的多得去了，光是 “可以加分号但是大家都不加” 的语言就有：Go, Scala, Ruby, Python, Swift, Groovy…至于说 “很难总结什么时候加不加”，其实真的很简单。真正会导致上下行解析出问题的 token 有 5 个：括号，方括号，正则开头的斜杠，加号，减号。我还从没见过实际代码中用正则、加号、减号作为行首的情况，所以总结下来就是一句话：一行开头是括号或者方括号的时候加上分号就可以了，其他时候全部不需要。其实即使是这两种情况，在实际代码中也颇为少见。另外，restricted production 这个东西（也就是导致 return 后面换行会自动插入分号的机制），不管你加不加分号你都是得搞懂了才能不被坑的，和加不加分号没有什么关系。更多细节，可以看我曾经给过的一个 talk：Hacking Semicolons by Evan You最后，上点代码好了，Vue.js 的代码全部不带分号：yyx990803/vue · GitHub另外说到工具，我确实写了一个，全自动帮你批量添加或者删除分号：yyx990803/semi · GitHub 做成 Git pre-commit hook，选择你自己喜欢的风格就可以。更新：eslint –fix 已经支持自动添加删除分号，另外在我的强烈要求下 prettier 1.0 现在也支持无分号选项，在不同 style 之间迁移的成本已经接近 0 了。 不为人知的JavaScript自动分号插入机制( ASI ) 相信从事过C#和Java的大家都知道分号是用作断句（EOS，end of statement）的，而且必须加分号，否则编译就不通过了。但JavaScript由于存在ASI机制，因此允许我们省略分号。ASI机制不是说在解析过程中解析器自动把分号添加到代码中，而是说解析器除了分号还会以换行为基础按一定的规则作为断句的依据，从而保证解析的正确性。 es5 标准定义了自动分号插入规则，包括以下三个基本规则加两个前置条件： 前置条件 如果插入分号后解析结果是空语句，那么不会自动插入分号。（空语句，else 前不加分好） 12if (a &gt; b) else c = d 如果插入分号后它成为 for 语句头部的两个分号之一，那么不会自动插入分号。(不会加分号) 1for (a; b) 基本规则左到右解析程序，当遇到一个不符合任何文法产生式的 token（叫做 违规 token(offending token)），那么只要满足下面条件之一就在违规 token 前面自动插入分号。 至少一个 LineTerminator 分割了违规 token 和前一个 token。 违规 token 是 }。1234567&#123; 1 2&#125; 3////////////////&#123; 1 ;2 ;&#125; 3; &emsp;左到右解析程序，tokens 输入流已经结束，当解析器无法将输入 token 流解析成单个完整 ECMAScript 程序 ，那么就在输入流的结束位置自动插入分号。&emsp;对于受限产生式，也就是下面的5个，我们把产生式 [no LineTerminator here]后面的 token 叫做受限 token，如果在 token 和 受限 token 间存在了至少一个 LineTerminator，那么会在受限 token 前自动加上 token。 总结&emsp;如上就能很好的解释尤大大的观点了]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript 到底是解释型语言还是编译型语言？]]></title>
    <url>%2Fblog%2Fjavascript%2F2019-08-22%2F</url>
    <content type="text"><![CDATA[JavaScript 到底是解释型语言还是编译型语言？Javascrip圣经 — MDN明确说JavaScript ( JS ) 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。到底作何解释，来吧让我们一起探讨一下🤔 由下面两个问题产生的疑惑 如果 JS 是解释型语言那为什么会有变量提升（hoisting）？ JIT（及时编译）会做代码优化(同时创建代码的编译版本)；解释型语言无法做到这些。 编译型语言 VS 解释型语言 编译型语言是代码在运行前编译器将人类可以理解的语言（编程语言）转换成机器可以理解的语言。 解释型语言也是人类可以理解的语言（编程语言），也需要转换成机器可以理解的语言才能执行，但是是在运行时转换的。所以执行前需要环境中安装了解释器；但是编译型语言编写的应用在编译后能直接运行。 许多人认为解释型语言意味着当遇到程序中行号为xyz时直接将其传给CPU就能运行；但是事实不是这样。所有的编程语言都是为人类创建的。他们是人类能够理解的。必须将编程语言转换为机器语言才能运行。编译器获取整个代码，转换它，做合适的优化并且创建一个可以运行的输出文件。编译器根据上下文来转换语句。 变量提升 我觉得你应该已经知道了 JavaScript 的变量提升。在函数作用域内的任何变量的声明都会被提升到顶部并且值为undefined。所以 JavaScript 引擎好像解释了同一个脚本文件两次？第一次完成所有的声明提升然后第二次才执行代码？还是先编译整个代码然后运行它？这两种都不对。 下面是 JavaScript 处理声明语句的过程： 一旦 V8 引擎进入一个执行具体代码的执行上下文（函数），它就对代码进行词法分析或者分词。这意味着代码将被分割成像foo = 10这样的原子符号（atomic token）。 在对当前的整个作用域分析完成后，引擎将 token 解析翻译成一个AST（抽象语法树）。 引擎每次遇到声明语句，就会把声明传到作用域（scope）中创建一个绑定。每次声明都会为变量分配内存。只是分配内存，并不会修改源代码将变量声明语句提升。正如你所知道的，在JS中分配内存意味着将变量默认设为undefined。 在这之后，引擎每一次遇到赋值或者取值，都会通过作用域（scope）查找绑定。如果在当前作用域中没有查找到就接着向上级作用域查找直到找到为止。 接着引擎生成 CPU 可以执行的机器码。 最后， 代码执行完毕。 所以变量提升不过是执行上下文的小把戏，而不是许多网站描述的源代码修改。在执行任何语句之前，解释器就要从创建执行上下文后已经存在的作用域（scope）中找到变量的值。 解释 JavaScript 中的即时编译（JIT）&emsp;JIT 或 及时编译 编译器不是 JavaScript 所特有的。其他语言比如 Java 也有一些在执行前编译代码的机制。现代 JavaScript 引擎同样有 JIT。是的，它们有编译器。让我来为你解释一下为什么它们需要 JIT 以及 JIT 在 JavaScript 的执行中是如何工作的。&emsp;编译型和解释型语言最重要的区别是编译型语言需要很长的时间来准备执行。因为它需要对整个代码进行词法分析、做一些极致的优化等工作。另一方面解释型语言几乎在执行后一瞬间就开始，但是没有任何代码优化。所以每一条语句都是分开转换（编译）的，考虑下面这一段代码 123for(i=0; i &lt; 1000; i++)&#123; sum += i;&#125; &emsp;在编译型语言中sum += i部分在循环运行时已经编译成了机器码，机器码将直接运行一千次。但是在解释型语言中，执行时会将sum += i转换（编译）一千次。对相同的代码进行一千次转换会造成非常大的性能损耗。这就是 Google 和 Mozilla 的开发人员将 JIT 加入 JavaScript 的原因。 编译&emsp;在 JavaScript 中如果一段代码运行超过一次，那么就称为 warm。如果一个函数开始变得 warmer（译者注：即运行更多次），JIT 将把这段代码送到编译器中编译并且保存一个编译后的版本。下一次同样代码执行的时候，引擎会跳过翻译过程直接使用编译后的版本。这将优化性能。在真正的编译器中，因为编译器能访问整个代码所以做了除此之外更多的事情。 优化&emsp;如果一段 warm 的代码变得 hot 或者 hotter（译者注：指运行更多次以及比更多还要多的次数）JIT 会尝试更多的优化并且保存优化后的版本。在编译器进行优化的过程中会做一些关于变量类型和运行环境中值的假设，如果假设不成立就将这个优化的版本回退，如果假设成立的话，这将让代码性能更高。想要了解更多 JIT 的知识可以阅读 Lin Clarks 关于JIT的课程。 总结&emsp;现在我们了解了 JavaScript 执行时到底发生了什么，所以应该可以区分 JavaScript 到底是编译型还是解释型语言了。下面是这篇文章的要点。&emsp;JavaScript 代码需要在机器（node 或者浏览器）上安装一个工具（JS 引擎）才能执行。这是解释型语言需要的。编译型语言程序能够自由地直接运行。变量提升不是代码修改。在这个过程中没有生成中间代码。变量提升只是 JS 解释器处理事情的方式。&emsp;JIT 是唯一一点我们可以对 JavaScript 是否是一个解释型语言提出疑问的理由。但是 JIT 不是完整的编译器，它在执行前进行编译。而且 JIT 只是 Mozilla 和 Google 的开发人员为了提升浏览器性能才引入的。JavaScript 或 TC39 从来没有强制要求使用 JIT。因此，虽然 JavaScript 执行时像是在编译或者像是一种编译和解释的混合，我仍然认为 JavaScript 是一个解释型语言或者是一个今天很多人说的混合型语言，而不是编译型语言。 阅读原文]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP与MYSQL开发入门【上】]]></title>
    <url>%2Fblog%2Fphp%2F2019-08-14%2F</url>
    <content type="text"><![CDATA[迈向全栈的必经之路，奋斗不息，努力不止，干就完了💪]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用操作（Hexo, Typoa）]]></title>
    <url>%2Fblog%2Fdaily%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. Typora will give you a seamless experience as both a reader and a writer. Check documention for more info.]]></content>
      <categories>
        <category>daily</category>
      </categories>
      <tags>
        <tag>daily</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你不知道的HTML]]></title>
    <url>%2Fblog%2FHTML%2F2019-08-11%2F</url>
    <content type="text"><![CDATA[你所不知道的HTML中的奇技淫巧，使劲戳我👇进来观看☺️ img 标签 crossorign属性与后台协商是否可以跨域 12&lt;img crossorign="anonymous" src="img.png" /&gt;&lt;script crossorign="anonymous"&gt;&lt;/script&gt; 通过&lt;img /&gt;标签检测用户网速 123456789&lt;script&gt; let s = Date.now(); let image = new Image(); image.src = "img.png" image.onload = function() &#123; let e = Date.now(); let w = 4 / e-s; // 1-1000 &#125;&lt;/script&gt; 系统性能监控平台、系统bug监控，打点，向后端定时发送模拟get请求https://map.baidu.com/mobile/img/t.gif?newmap=1&amp;module=index&amp;action=index&amp;page=index&amp;third_party=&amp;wise_net=1&amp;is_landing=true&amp;c=224&amp;resid=31&amp;da_ver=2.1.0&amp;t=1565620695926&amp;da_src=indexnearbypg.default.callnaguidebanner&amp;da_act=show 1&lt;img src="img.gif?params" /&gt; Doctype含义 声明位于位于HTML文档中的第一行，告诉浏览器的解释器用什么文档标准来解析这个文档。 DOCTYPE书写错误或者不存在会导致文档已兼容模式呈现。 标准模式和混杂模式 标准模式：html排版和js渲染工作模式都是以该浏览器支持的最高标准运行。 兼容模式：页面已宽松的向后兼容的方式显示，模拟老浏览器的行为。 HTML5 为什么只需要写 &lt;!DOCTYPE HTML&gt; &nbsp;html5不是基于SGML,所以不需要对DTD进行引用，但是它需要对文档类型声明，需要doctype来规范浏览器行为。 html语义化 定义：正确的标签做正确的事情 为什么要做语义化 有利于SEO，有利于搜索引擎爬虫更好的理解我们的网页，从而获取更多的有效信息，提升网页的权重。 在没有CSS的时候能够清晰的看出网页的结构，增强可读性，便于团队开发和维护。 支持多终端设备的浏览器渲染。 SEO 汉译为搜索引擎优化。是一种方式：利用搜索引擎的规则提高网站在有关搜索引擎内的自然排名。 目的：为网站提供生态式的自我营销解决方案，让其在行业内占据领先地位，获得品牌收益；SEO包含站外SEO和站内SEO两方面；为了从搜索引擎中获得更多的免费流量，从网站结构、内容建设方案、用户互动传播、页面等角度进行合理规划，还会使搜索引擎中显示的网站相关信息对用户来说更具有吸引力。 优化方式： 内部优化： META标签优化：例如：TITLE，KEYWORDS，DESCRIPTION等的优化。 内部链接的优化，包括相关性链接（Tag标签），锚文本链接，各导航链接，及图片链接。 网站内容更新：每天保持站内的更新(主要是文章的更新等)。 外部优化： 外部链接类别：友情链接、博客、论坛、B2B、新闻、分类信息、贴吧、知道、百科、站群、相关信息网等尽量保持链接的多样性。 外链运营：每天添加一定数量的外部链接，使关键词排名稳定提升。 外链选择：与一些和你网站相关性比较高,整体质量比较好的网站交换友情链接,巩固稳定关键词排名。 同源策略 概念：如果两个页面的协议，端口（如果有指定）和域名都相同，则两个页面具有相同的源。 目的：保证用户信息安全，防止恶意网站窃取数据，防止cookie共享 限制范围 cookie、localStorage、indexedDB无法读取 dom 无法获取 ajax不能发送 form表单没有限制 如何设置同源策略(host)：document.domain 不受同源策略限制： 页面中的链接，重定向以及表单提交是不会受到同源策略限制的。 跨域资源的引入是可以的。但是js不能读写加载的内容。如嵌入到页面中的&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;，&lt;img&gt;，&lt;link&gt;，&lt;iframe&gt;等。 跨域 概念：受到浏览器同源策略的影响，要操作其他源下面的脚本，就需要跨域。 Ajax跨域的解决方案 JSONP：网页添加一个&lt;script&gt;元素，向服务器请求jsON数据。服务器收到请求后，将数据放在一个指定名字的回调函数里传回来。 缺点只支持get请求 优点简单方便，易理解，兼容性良好 如下示例代码 12345678910111213141516//动态创建script，用于跨越操作function creatScriptTag(src) &#123; var script = document.createElement('script'); script.setAttribute("type","text/javascript"); script.src = src; document.body.appendChild(script);&#125;// 调用creatScriptTag函数window.onload = function () &#123; var url = '/index.php?jsoncallback=result'; creatScriptTag(url);&#125;// 定义回调函数function result (data) &#123; console.log(data);&#125; 12345678910111213// index.php &lt;?phpheader('Content-type: application/json');//获取回调函数名$jsoncallback = htmlspecialchars($_REQUEST ['jsoncallback']);//取数据$data = [ 'data'=&gt;'123',];$json_data = json_encode(array('code'=&gt;'200','msg'=&gt;'请求成功','data' =&gt; $data),jsON_UNESCAPED_UNICODE);//输出jsonp格式的数据echo $jsoncallback ."(" . $json_data . ")";?&gt; WebSocket:是一种通信协议，使用ws://（非加密）和wss://（加密）作为协议前缀。该协议不实行同源政策，只要服务器设置利用origin字段设置白名单，就可以通过它进行跨源通信。 CORS（Cross-Origin Resource Sharing） 在请求头信息中增加Origin字段，用来说明此次请求来自那个源（协议+域名+端口），此字段可以设置相应白名单 必须设置Access-Control-Allow-Origin字段，值要求是Origin字段的值或者是，的意思是接受任意域名的请求 CORS请求默认不发送cookie和http认证信息，如果要发送，要在服务器端指Access-Control-Allow-Credentials: true,并且ajax请求必须打开withCredentials属性 12var xhr = new XMLHttpRequest();xhr.withCredentials = true; 如果选择发送cookie,Access-Control-Allow-Origin字段不能设为*，必须指定明确的，与当前网页一致的域名]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
</search>
